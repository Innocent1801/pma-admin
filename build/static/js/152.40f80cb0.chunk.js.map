{"version":3,"file":"static/js/152.40f80cb0.chunk.js","mappings":"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","sources":["../node_modules/@firebase/storage/src/implementation/error.ts","../node_modules/@firebase/storage/src/implementation/constants.ts","../node_modules/@firebase/storage/src/implementation/location.ts","../node_modules/@firebase/storage/src/implementation/connection.ts","../node_modules/@firebase/storage/src/implementation/failrequest.ts","../node_modules/@firebase/storage/src/implementation/type.ts","../node_modules/@firebase/storage/src/implementation/url.ts","../node_modules/@firebase/storage/src/implementation/utils.ts","../node_modules/@firebase/storage/src/implementation/request.ts","../node_modules/@firebase/storage/src/implementation/backoff.ts","../node_modules/@firebase/storage/src/implementation/fs.ts","../node_modules/@firebase/storage/src/platform/browser/base64.ts","../node_modules/@firebase/storage/src/implementation/string.ts","../node_modules/@firebase/storage/src/implementation/blob.ts","../node_modules/@firebase/storage/src/implementation/json.ts","../node_modules/@firebase/storage/src/implementation/path.ts","../node_modules/@firebase/storage/src/implementation/metadata.ts","../node_modules/@firebase/storage/src/implementation/requestinfo.ts","../node_modules/@firebase/storage/src/implementation/requests.ts","../node_modules/@firebase/storage/src/implementation/taskenums.ts","../node_modules/@firebase/storage/src/implementation/observer.ts","../node_modules/@firebase/storage/src/implementation/async.ts","../node_modules/@firebase/storage/src/platform/browser/connection.ts","../node_modules/@firebase/storage/src/task.ts","../node_modules/@firebase/storage/src/reference.ts","../node_modules/@firebase/storage/src/service.ts","../node_modules/@firebase/storage/src/constants.ts","../node_modules/@firebase/storage/src/api.ts","../node_modules/@firebase/storage/src/index.ts","../node_modules/@firebase/util/src/crypt.ts","../node_modules/@firebase/util/src/defaults.ts","../node_modules/@firebase/util/src/global.ts","../node_modules/@firebase/util/src/deferred.ts","../node_modules/@firebase/util/src/emulator.ts","../node_modules/@firebase/util/src/environment.ts","../node_modules/@firebase/util/src/errors.ts","../node_modules/@firebase/util/src/obj.ts","../node_modules/@firebase/util/src/compat.ts","../node_modules/@firebase/logger/src/logger.ts","../node_modules/@firebase/app/node_modules/idb/build/wrap-idb-value.js","../node_modules/@firebase/app/node_modules/idb/build/index.js","../node_modules/@firebase/app/src/platformLoggerService.ts","../node_modules/@firebase/app/src/logger.ts","../node_modules/@firebase/app/src/constants.ts","../node_modules/@firebase/app/src/internal.ts","../node_modules/@firebase/app/src/errors.ts","../node_modules/@firebase/app/src/firebaseApp.ts","../node_modules/@firebase/app/src/api.ts","../node_modules/@firebase/app/src/indexeddb.ts","../node_modules/@firebase/app/src/heartbeatService.ts","../node_modules/@firebase/app/src/registerCoreComponents.ts","../node_modules/@firebase/app/src/index.ts","../node_modules/@firebase/component/src/component.ts","../node_modules/@firebase/component/src/constants.ts","../node_modules/@firebase/component/src/provider.ts","../node_modules/@firebase/component/src/component_container.ts","../node_modules/firebase/app/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unique to the `StorageError`.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code: StorageErrorCode, message: string, private status_ = 0) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status(): number {\n    return this.status_;\n  }\n\n  set status(status: number) {\n    this.status_ = status;\n  }\n\n  /**\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nexport enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function missingPolyFill(polyFill: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * 1 second\n */\nexport const DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNode } from '@firebase/util';\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\n  // PR: https://github.com/node-fetch/node-fetch/pull/1664\n  return typeof Blob !== 'undefined' && !isNode();\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nexport function isRetryStatusCode(\n  status: number,\n  additionalRetryCodes: number[]\n): boolean {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429\n  ];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\nimport { isRetryStatusCode } from './utils';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>,\n    private retry = true\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (\n        progressEvent: ProgressEvent\n      ) => void = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (\n            !hitServer ||\n            (isRetryStatusCode(status, this.additionalRetryCodes_) &&\n              this.retry)\n          ) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string,\n  retry = true\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory,\n    retry\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nexport function start(\n  doRequest: (\n    onRequestComplete: (success: boolean) => void,\n    canceled: boolean\n  ) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  backoffCompleteCb: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { missingPolyFill } from '../../implementation/error';\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if ((e as Error).message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr: StorageError;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = typeof TaskState[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError,\n  retryLimitExceeded\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\nimport { isRetryStatusCode } from './implementation/utils';\nimport { CompleteFn } from '@firebase/util';\nimport { DEFAULT_MIN_SLEEP_TIME_MILLIS } from './implementation/constants';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private pendingTimeout?: ReturnType<typeof setTimeout>;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  private sleepTime: number;\n\n  private maxSleepTime: number;\n\n  isExponentialBackoffExpired(): boolean {\n    return this.sleepTime > this.maxSleepTime;\n  }\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        const backoffExpired = this.isExponentialBackoffExpired();\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            this.sleepTime = Math.max(\n              this.sleepTime * 2,\n              DEFAULT_MIN_SLEEP_TIME_MILLIS\n            );\n            this._needToFetchStatus = true;\n            this.completeTransitions_();\n            return;\n          }\n        }\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this.pendingTimeout = setTimeout(() => {\n              this.pendingTimeout = undefined;\n              this._continueUpload();\n            }, this.sleepTime);\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e as StorageError;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken,\n        /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize * 2 < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        } else if (this.pendingTimeout) {\n          clearTimeout(this.pendingTimeout);\n          this.pendingTimeout = undefined;\n          this.completeTransitions_();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: CompleteFn | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null,\n    retry = true\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion,\n        retry\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport {\n  EmulatorMockTokenOptions,\n  getModularInstance,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\nexport { StorageError, StorageErrorCode } from './implementation/error';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw new DecodeBase64StringError();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * An error encountered while decoding base64 string.\n */\nexport class DecodeBase64StringError extends Error {\n  readonly name = 'DecodeBase64StringError';\n}\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './global';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  /**\n   * Override Firebase's runtime environment detection and\n   * force the SDK to act as if it were in the specified environment.\n   */\n  forceEnvironment?: 'browser' | 'node';\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\n * The dots are in parens because certain compilers (Vite?) cannot\n * handle seeing that variable in comments.\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n * @public\n */\nexport const getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n * @public\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\nimport { getDefaults } from './defaults';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') {\n    return true;\n  } else if (forceEnvironment === 'browser') {\n    return false;\n  }\n\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  try {\n    return typeof indexedDB === 'object';\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n"],"names":["StorageErrorCode","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","StorageError","_FirebaseError","_inherits","_super","_createSuper","code","message","_this","status_","arguments","length","undefined","_classCallCheck","call","prependCode","concat","customData","serverResponse","_baseMessage","Object","setPrototypeOf","_assertThisInitialized","prototype","_createClass","key","get","this","set","status","value","FirebaseError","unknown","UNKNOWN","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","canceled","CANCELED","cannotSliceBlob","CANNOT_SLICE_BLOB","invalidArgument","INVALID_ARGUMENT","appDeleted","APP_DELETED","invalidFormat","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","ErrorCode","Location","bucket","path","path_","encode","encodeURIComponent","bucketString","host","bucketLocation","makeFromUrl","e","INVALID_DEFAULT_BUCKET","url","location","bucketDomain","gsRegex","RegExp","httpModify","loc","decodeURIComponent","firebaseStorageHost","replace","groups","regex","indices","postModify","charAt","slice","i","group","captures","exec","bucketValue","pathValue","INVALID_URL","invalidUrl","FailRequest","error","promise_","Promise","reject","isString","p","String","isNativeBlob","isNativeBlobDefined","Blob","isNode","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","hasOwnProperty","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","isExtraRetryCode","indexOf","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","_this2","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","_this3","backoffDone","requestWentThrough","connection","wasSuccessCode","result","getResponse","err","getErrorText","RequestEndStatus","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","_len","args","Array","_key","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","_len2","_key2","waitMillis","Math","random","stopped","stop","wasTimeout","start","backoffCallback","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","wasCanceled","ABORT","successCode","appDelete","abort","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob$1","_len3","_key3","bb","append","getBlob","UNSUPPORTED_ENVIRONMENT","decodeBase64","encoded","atob","polyFill","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataUrl","parts","DataURLParts","base64","rest","decoded","percentEncodedBytes_","dataURLBytes_","b","c","charCodeAt","push","Uint8Array","hasMinus","hasUnder","hasPlus","hasSlash","bytes","includes","array","dataURL","matches","match","middle","s","end","substring","endsWith","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","size_","type_","startByte","endByte","sliced","blob","webkitSlice","mozSlice","sliceBlob","buffer","_len4","_key4","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","jsonObjectOrNull","obj","JSON","parse","isArray","lastComponent","lastIndexOf","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","getMappings","mappings","nameMapping","_metadata","fullPath","xformPath","sizeMapping","Number","fromResource","service","resource","len","mapping","defineProperty","_makeStorageReference","addRef","fromResourceString","resourceString","toResourceString","stringify","RequestInfo","method","handler","urlParams","headers","body","errorHandler","progressCallback","successCodes","handlerCheck","cndn","metadataHandler","xhr","text","downloadUrlHandler","tokens","split","token","alt","downloadUrlFromResourceString","_protocol","sharedErrorHandler","newErr","UNAUTHORIZED_APP","UNAUTHENTICATED","QUOTA_EXCEEDED","UNAUTHORIZED","objectErrorHandler","shared","OBJECT_NOT_FOUND","getMetadata$2","fullServerUrl","maxOperationRetryTime","requestInfo","metadataForUpload_","metadataClone","assign","determineContentType_","multipartUpload","bucketOnlyServerUrl","boundary","str","toString","genBoundary","metadata_","preBlobPart","postBlobPart","name","maxUploadRetryTime","uploadData","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","SERVER_FILE_WRONG_SIZE","bytesLeft","bytesToUpload","min","uploadStatus","newCurrent","TaskState","RUNNING","PAUSED","SUCCESS","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","next","observer","async","f","_len5","argsToForward","_key5","textFactoryOverride","XhrConnection","_this4","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","_XhrConnection","_super2","responseType","newTextConnection","UploadTask","ref","_this5","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_codeEquals","completeTransitions_","backoffExpired","isExponentialBackoffExpired","sleepTime","max","_transition","_metadataErrorHandler","maxSleepTime","storage","_promise","_start","_this6","sizeBefore","_updateProgress","_this7","_createResumable","_fetchStatus","_fetchMetadata","pendingTimeout","_continueUpload","_oneShotUpload","callback","_this8","all","_getAuthToken","_getAppCheckToken","_ref2","_slicedToArray","authToken","appCheckToken","_this9","_resolveToken","metadataForUpload","createResumableUpload","_location","createRequest","_makeRequest","getPromise","_this10","sizeString","isNaN","getResumableUploadStatus","statusRequest","_this11","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","_this12","metadataRequest","_this13","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","bytesTransferred","totalBytes","task","completed","_this14","_addObserver","_removeObserver","onFulfilled","onRejected","_notifyObserver","splice","_this15","_finishPromise","triggered","bind","snapshot","valid","Reference","_service","_newRef","newPath","parent","INVALID_ROOT_OPERATION","invalidRootOperation","getDownloadURL$1","_throwIfRoot","getDownloadUrl","makeRequestWithTokens","NO_DOWNLOAD_URL","_getChild$1","childPath","canonicalChildPath","filter","component","join","child","refFromPath","FirebaseStorageImpl","_bucket","NO_DEFAULT_BUCKET","reference","ref$1","serviceOrRef","pathOrUrl","test","extractBucket","config","makeFromBucketSpec","app","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","options","time","POSITIVE_INFINITY","_getAuthToken2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","auth","tokenData","wrap","_context","prev","_overrideAuthToken","abrupt","getImmediate","optional","getToken","sent","accessToken","_getAppCheckToken2","_callee2","appCheck","_context2","request","clear","requestFactory","_this16","appId","firebaseVersion","addGmpidHeader_","addAuthHeader_","addVersionHeader_","addAppCheckHeader_","makeRequest","add","delete","_makeRequestWithTokens","_callee3","_yield$Promise$all","_yield$Promise$all2","_context3","_x4","_x5","STORAGE_TYPE","uploadBytesResumable","uploadBytesResumable$1","getModularInstance","getDownloadURL","getStorage","getApp","bucketUrl","storageInstance","_getProvider","identifier","emulator","getDefaultEmulatorHostnameAndPort","connectStorageEmulator","_toConsumableArray","port","mockUserToken","createMockUserToken","projectId","connectStorageEmulator$1","factory","container","_ref3","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","_registerComponent","Component","setMultipleInstances","registerVersion","version","stringToByteArray$1","out","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","encodeByteArray","input","webSafe","Error","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","encodeString","btoa","decodeString","pos","c1","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","byte4","DecodeBase64StringError","_Error","_wrapNativeSuper","base64urlEncodeWithoutPadding","utf8Bytes","base64Encode","base64Decode","console","getDefaultsFromGlobal","self","window","global","getGlobal","__FIREBASE_DEFAULTS__","getDefaults","process","defaultsJsonString","getDefaultsFromEnvVariable","document","cookie","getDefaultsFromCookie","info","productName","_a","_b","emulatorHosts","getDefaultEmulatorHost","separatorIndex","parseInt","getDefaultAppConfig","Deferred","promise","catch","uid","project","iat","sub","user_id","payload","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","alg","forceEnvironment","isIndexedDBAvailable","indexedDB","validateIndexedDBOpenable","preExist","DB_CHECK_NAME","onsuccess","close","deleteDatabase","onupgradeneeded","onerror","_Error2","captureStackTrace","ErrorFactory","create","serviceName","errors","fullCode","template","PATTERN","_","replaceTemplate","fullMessage","deepEqual","a","aKeys","keys","bKeys","_i","_aKeys","k","aProp","bProp","isObject","_i2","_bKeys","thing","_delegate","LogLevel","instances","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","SILENT","defaultLogLevel","ConsoleMethod","_ConsoleMethod","_defineProperty","defaultLogHandler","instance","logType","logLevel","now","Date","toISOString","_console","Logger","_logLevel","_logHandler","_userLogHandler","TypeError","_len6","_key6","idbProxyableTypes","cursorAdvanceMethods","instanceOfAny","object","constructors","some","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","target","prop","receiver","IDBTransaction","objectStoreNames","objectStore","has","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","unwrap","storeNames","tx","sort","transformCachableValue","done","unlisten","DOMException","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","Proxy","IDBRequest","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","useIndex","isWrite","storeName","_target","_args","store","shift","_x","oldTraps","_objectSpread","PlatformLoggerServiceImpl","getProviders","provider","getComponent","isVersionServiceProvider","library","logString","logger","DEFAULT_ENTRY_NAME","PLATFORM_LOG_STRING","_PLATFORM_LOG_STRING","name$o","_apps","_components","_addComponent","addComponent","debug","componentName","_step","values","_iterator","n","heartbeatController","triggerHeartbeat","ERRORS","_ERRORS","ERROR_FACTORY","FirebaseAppImpl","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","initializeApp","rawConfig","existingApp","_step2","ComponentContainer","_iterator2","_createForOfIteratorHelper","newApp","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","warn","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","originalErrorMessage","readHeartbeatsFromIndexedDB","_x2","_readHeartbeatsFromIndexedDB","_callee8","idbGetError","_context8","computeKey","t0","writeHeartbeatsToIndexedDB","_x3","_writeHeartbeatsToIndexedDB","_callee9","heartbeatObject","_context9","put","MAX_HEADER_BYTES","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","_triggerHeartbeat","platformLogger","agent","date","getPlatformInfoString","getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","_getHeartbeatsHeader","_extractHeartbeatsFor","heartbeatsToSend","unsentEntries","headerString","extractHeartbeatsForHeader","heartbeatsCache","_step3","maxSize","_iterator3","_loop","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","_runIndexedDBEnvironmentCheck","_read","_callee4","idbHeartbeatObject","_context4","_callee5","heartbeatsObject","existingHeartbeatsObject","_context5","_overwrite","_callee6","_context6","_x6","_add","version$1","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","mode","props","Provider","instancesDeferred","instancesOptions","onInitCallbacks","normalizedIdentifier","normalizeInstanceIdentifier","deferred","isInitialized","shouldAutoInitialize","getOrInitializeService","isComponentEager","entries","_step$value","instanceDeferred","services","from","INTERNAL","_delete","_delete2","opts","_opts$options","isComponentSet","_step2$value","existingCallbacks","existingInstance","callbacks","_ref$options","invokeOnInitCallbacks","providers","setComponent"],"sourceRoot":""}